@page "/Login"


@layout Layout.LoginLayout
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject Data.Services.CookieService CookieService
@inject Data.Services.GlobalService GlobalService

@using Data.Dtos
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Mvc
@using SupermarketWeb.Data.Services


<head>
    <link rel="shortcut icon" href="assets/images/favicon.png" type="image/x-icon" />    <!-- Favicon -->
    <link rel="apple-touch-icon-precomposed" href="assets/images/apple-touch-icon-57-precomposed.png">	<!-- For iPhone -->
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="assets/images/apple-touch-icon-114-precomposed.png">    <!-- For iPhone 4 Retina display -->
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="assets/images/apple-touch-icon-72-precomposed.png">    <!-- For iPad -->
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="assets/images/apple-touch-icon-144-precomposed.png">    <!-- For iPad Retina display -->
    <!-- CORE CSS FRAMEWORK - START -->
    <link href="assets/plugins/pace/pace-theme-flash.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="assets/plugins/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/fonts/font-awesome/css/font-awesome.css" rel="stylesheet" type="text/css" />
    <link href="assets/css/animate.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/plugins/perfect-scrollbar/perfect-scrollbar.css" rel="stylesheet" type="text/css" />
    <!-- CORE CSS FRAMEWORK - END -->
    <!-- OTHER SCRIPTS INCLUDED ON THIS PAGE - START -->
    <link href="assets/plugins/icheck/skins/square/orange.css" rel="stylesheet" type="text/css" media="screen" />        <!-- OTHER SCRIPTS INCLUDED ON THIS PAGE - END -->
    <!-- CORE CSS TEMPLATE - START -->
    <link href="assets/css/style.css" rel="stylesheet" type="text/css" />
    <link href="assets/css/responsive.css" rel="stylesheet" type="text/css" />
    <!-- CORE CSS TEMPLATE - END -->
    <script src="assets/js/JSInterop.js"></script>
</head>
<PageTitle>Login</PageTitle>

<div class="login-wrapper login_page">
    <div id="login" class="login loginpage offset-xl-4 col-xl-4 offset-lg-3 col-lg-6 offset-md-3 col-md-6 col-offset-0 col-12">
        <h1><a href="#" title="Login Page" tabindex="-1">Ultra Admin</a></h1>
        @if (ErrorLoginMessage != "")
        {
            <div class="alert alert-danger center" role="alert">
                @ErrorLoginMessage
            </div>
        }
        <EditForm FormName="LoginForm" method="post" Model="@loginRequest" OnValidSubmit="@loginProcess">
           <p>
                <label for="user_login">
                    Username<br />
                    <InputText @bind-Value="@loginRequest.Username" placeholder="Username" id="user_login" class="input" size="20"></InputText>
                </label>
            </p>
            <p>
                <label for="user_pass">
                    Password<br />
                    <InputText type="password" @bind-Value="@loginRequest.Password" id="user_pass" class="input" size="20"></InputText>
                </label>
            </p>

            <p class="forgetmenot">
                <label class="icheck-label form-label" for="rememberme"><input name="rememberme" type="checkbox" id="rememberme" value="forever" class="skin-square-orange" checked> Remember me</label>
            </p>



            <p class="submit">
                <input type="submit" name="wp-submit" id="wp-submit" class="btn btn-orange btn-block" value="Sign In" />
            </p>
        </EditForm>

        <p id="nav">
            <a class="float-left" href="#" title="Password Lost and Found">Forgot password?</a>
        </p>


    </div>
</div>

<!-- CORE JS FRAMEWORK - START -->
<script src="assets/js/jquery-3.4.1.min.js" type="text/javascript"></script>
<script src="assets/js/popper.min.js" type="text/javascript"></script>
<!-- <script src="assets/js/jquery.easing.min.js" type="text/javascript"></script>  -->
<script src="assets/plugins/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script src="assets/plugins/pace/pace.min.js" type="text/javascript"></script>

<script src="assets/plugins/perfect-scrollbar/perfect-scrollbar.min.js" type="text/javascript"></script>
<script src="assets/plugins/viewport/viewportchecker.js" type="text/javascript"></script>
<!-- CORE JS FRAMEWORK - END -->
<!-- OTHER SCRIPTS INCLUDED ON THIS PAGE - START -->
<script src="assets/plugins/icheck/icheck.min.js" type="text/javascript"></script><!-- OTHER SCRIPTS INCLUDED ON THIS PAGE - END -->
<!-- CORE TEMPLATE JS - START -->
<script src="assets/js/scripts.js" type="text/javascript"></script>
<!-- END CORE TEMPLATE JS - END -->
<!-- Sidebar Graph - START -->
<script src="assets/plugins/sparkline-chart/jquery.sparkline.min.js" type="text/javascript"></script>
<script src="assets/js/chart-sparkline.js" type="text/javascript"></script>
<!-- Sidebar Graph - END -->
@code {
    [SupplyParameterFromForm(FormName = "LoginForm")]
    public LoginRequest loginRequest { get; set; } = new ();
    string ErrorLoginMessage = "";
    string cookie;
    private TokenResponse tokenResponse = new TokenResponse();

    protected override async Task OnInitializedAsync()
    {
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        cookie = await CookieService.GetCookie("accessToken");
        // Retrieve the authToken from localStorage when the component is initialized
        //string validAuthToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(cookie))
        {
            //NavigationManager.NavigateTo("/Login", true);
        }
        if (firstRender)
        {
            Console.WriteLine("bonjour");
        }
    }


    async public Task loginProcess()
    {
        ErrorLoginMessage = "";
        try{
            var response = await HttpClient.PostAsJsonAsync<LoginRequest>(Configuration.GetSection("BaseUrl").Value + "/api/Auth/Login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
                var responseUser = await HttpClient.GetAsync(Configuration.GetSection("BaseUrl").Value + "/api/Employee/"+tokenResponse.LoggedUserId);
                var loggedUser = await responseUser.Content.ReadFromJsonAsync<User>();
                GlobalService.StoreId = tokenResponse.StoreID;
                GlobalService.LoggedUser= loggedUser.username;
                GlobalService.LoggedUserLevel = tokenResponse.LoggedUserLevel;
                GlobalService.LoggedUserId = loggedUser.id;
                GlobalService.StoreType = tokenResponse.StoreType;
                await AuthenticationStateProvider.LoginAsync(tokenResponse, loggedUser);
                // Redirigez l'utilisateur vers la page d'accueil ou une autre page après la connexion
                NavigationManager.NavigateTo("/Home", true);
            }
            else
            {
                ErrorLoginMessage = "Username and/or password incorrect!";
                return;
            }
        }
        catch(Exception e)
        {
            ErrorLoginMessage = e.Message+"\n Contact Admin for Assistance";
            return;
        }
    }
}
